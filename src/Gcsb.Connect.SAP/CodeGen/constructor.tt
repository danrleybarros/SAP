<#@ template hostspecific="true" language="C#" debug="true" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#
	Debugger.Launch();
	var namespaceOfBuilders = "Tests";
	var project = GetProjectContainingFile("IEntity.cs");
	var dtoTypes = GetClassesOf(project).Where(c => c.Name.EndsWith("FAT")).ToList();	
#>


namespace <#=namespaceOfBuilders #>
{
	<# 
	foreach(var dtoType in dtoTypes)
	{
		#>
	
	public class <#= dtoType.Name #> 
	{
		public <#= dtoType.Name #> (
			<# var list = FindProperties(dtoType.Members);
			for(var i = 0; i < list.Count; i++)
			{ #> <#= list[i].Type.AsFullName #> <#= list[i].Name.ToLower() #><#=list.Count - 1 == i ? ")": "," #>
			<#}#>
{
		<# foreach (var item in list)
		{#>
		this.<#= item.Name #> = <#= item.Name.ToLower() #>;
		<#}#>
}

	<#foreach(var property in FindProperties(dtoType.Members)){#>
	public <#=property.Type.AsFullName #> <#=property.Name #> { get; private set; }
	<#
	} /* foreach */#>

	}

	<#
		}
	#>
}











<#+
	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<EnvDTE.ProjectItem>();
		
		if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
		{
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}
		
		return ret;
	}

	public string GetListedType(EnvDTE.CodeProperty property)
    {
		return property.Type.AsFullName.Replace("System.Collections.Generic.List<", "").Replace(">","");
    }

	public EnvDTE.Project GetProjectContainingFile(string filename)
    {
		var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		return visualStudio.Solution.FindProjectItem(filename).ContainingProject as EnvDTE.Project;
	}

	public List<EnvDTE.CodeClass> GetClassesOf(EnvDTE.Project project)
	{
		var items = GetProjectItemsRecursively(project.ProjectItems);

		var classes = new List<EnvDTE.CodeClass>();

		foreach(var item in items)
        {
			if(item.FileCodeModel != null)
            {
				foreach (EnvDTE.CodeElement element in item.FileCodeModel.CodeElements)
				{
					if (element is EnvDTE.CodeNamespace)
					{
						EnvDTE.CodeNamespace ns = (EnvDTE.CodeNamespace)element;
					
						foreach (EnvDTE.CodeElement elem in ns.Members)
						{
							if (elem is EnvDTE.CodeClass)
							{
								classes.Add(elem as EnvDTE.CodeClass);
							}
						}
					}
				}
            }
        }

		return classes;
	}

	public List<EnvDTE.CodeProperty> FindProperties(EnvDTE.CodeElements elements)
    {
        List<EnvDTE.CodeProperty> properties = new List<EnvDTE.CodeProperty>();
        
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
        return properties;
    }
	#>