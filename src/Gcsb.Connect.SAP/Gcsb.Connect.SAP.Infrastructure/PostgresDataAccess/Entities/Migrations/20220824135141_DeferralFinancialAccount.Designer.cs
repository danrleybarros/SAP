// <auto-generated />
using System;
using Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220824135141_DeferralFinancialAccount")]
    partial class DeferralFinancialAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AccountCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<string>("AdabasCode")
                        .HasColumnType("text");

                    b.Property<string>("AffiliateCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("BillFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BillTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BillingCity")
                        .HasColumnType("text");

                    b.Property<string>("BillingComplement")
                        .HasColumnType("text");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("text");

                    b.Property<string>("BillingCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("BillingCycle")
                        .HasColumnType("text");

                    b.Property<string>("BillingNeighbourhood")
                        .HasColumnType("text");

                    b.Property<string>("BillingNumber")
                        .HasColumnType("text");

                    b.Property<string>("BillingPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("BillingStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("BillingStreet")
                        .HasColumnType("text");

                    b.Property<string>("BillingZIPcode")
                        .HasColumnType("text");

                    b.Property<string>("CNPJServiceProviderCompany")
                        .HasColumnType("text");

                    b.Property<string>("ChargeType")
                        .HasColumnType("text");

                    b.Property<string>("CityHallServiceDescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CityServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CnpjMarketPlace")
                        .HasColumnType("text");

                    b.Property<string>("CommentsCredited")
                        .HasColumnType("text");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyNameMarketPlace")
                        .HasColumnType("text");

                    b.Property<string>("CpfUserHasMadeCredit")
                        .HasColumnType("text");

                    b.Property<string>("CustomerAcronym")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCNPJ")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCPF")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerStateRegistration")
                        .HasColumnType("text");

                    b.Property<string>("CustomerTransactionCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CycleCode")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CycleReference")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FinancialStatus")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<double?>("GrandTotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("GrandTotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("GrandTotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("GrossRetailPrice")
                        .HasColumnType("numeric");

                    b.Property<double?>("GrossWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uuid");

                    b.Property<string>("IndividualInvoice")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("InvoiceCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MailingCity")
                        .HasColumnType("text");

                    b.Property<string>("MailingComplement")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("MailingNeighbourhood")
                        .HasColumnType("text");

                    b.Property<string>("MailingNumber")
                        .HasColumnType("text");

                    b.Property<string>("MailingPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("MailingStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("MailingStreet")
                        .HasColumnType("text");

                    b.Property<string>("MailingZIPcode")
                        .HasColumnType("text");

                    b.Property<string>("Marketplace")
                        .HasColumnType("text");

                    b.Property<string>("MarketplaceCity")
                        .HasColumnType("text");

                    b.Property<string>("MarketplaceState")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalTaxpayerRegistration")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("NextRenewalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfferCode")
                        .HasColumnType("text");

                    b.Property<string>("OfferName")
                        .HasColumnType("text");

                    b.Property<string>("OpportunityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("Premeditateddefaulter")
                        .HasColumnType("text");

                    b.Property<double?>("ProRateScale")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedRetailPriceUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedRetailUnitDiscountedPriceAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedVendorUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedWholesaleUnitDiscountedPriceAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedWholesaleUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("text");

                    b.Property<string>("PromotionDuration")
                        .HasColumnType("text");

                    b.Property<string>("ProposalNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProrateOnCancellation")
                        .HasColumnType("text");

                    b.Property<string>("ProrateType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Qty")
                        .HasColumnType("double precision");

                    b.Property<string>("QuoteId")
                        .HasColumnType("text");

                    b.Property<string>("Receivable")
                        .HasColumnType("text");

                    b.Property<string>("RefundAmount")
                        .HasColumnType("text");

                    b.Property<string>("RefundType")
                        .HasColumnType("text");

                    b.Property<string>("ResellerContactName")
                        .HasColumnType("text");

                    b.Property<string>("ResellerEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("ResellerName")
                        .HasColumnType("text");

                    b.Property<string>("ResellerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text");

                    b.Property<double?>("RetailPriceDiscount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RetailUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("SalesReferenceCode")
                        .HasColumnType("text");

                    b.Property<string>("Segment")
                        .HasColumnType("text");

                    b.Property<Guid>("Sequence")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceCancellationDate")
                        .HasColumnType("text");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceProviderCompanyName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceType")
                        .HasColumnType("text");

                    b.Property<string>("SpecialProcedureNumber")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("StoreAcronym")
                        .HasColumnType("text");

                    b.Property<string>("StoreAcronymServiceProvider")
                        .HasColumnType("text");

                    b.Property<string>("StoreCode")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text");

                    b.Property<double?>("TaxOnTotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TaxOnTotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TaxOnTotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TaxRateCOFINS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TaxRateISS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TaxRatePIS")
                        .HasColumnType("numeric");

                    b.Property<string?>("TermDuration")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TermEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TermStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("TotalInvoicePrice")
                        .HasColumnType("numeric");

                    b.Property<double?>("TotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TotalRetailPriceDiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<double?>("TotalRetailPriceWithTaxesWithoutDiscount")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TotalTaxCOFINS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalTaxISS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalTaxPIS")
                        .HasColumnType("numeric");

                    b.Property<double?>("TotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalWholesalePriceDiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("text");

                    b.Property<string>("UsageAttributes")
                        .HasColumnType("text");

                    b.Property<string>("UserAccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("VendorCurrency")
                        .HasColumnType("text");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.Property<double?>("VendorUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("WholesalePriceDiscount")
                        .HasColumnType("double precision");

                    b.Property<double?>("WholesaleUnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("BillFeed", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AccountCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AdabasCode")
                        .HasColumnType("text");

                    b.Property<string>("BillingCity")
                        .HasColumnType("text");

                    b.Property<string>("BillingComplement")
                        .HasColumnType("text");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("text");

                    b.Property<string>("BillingCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("BillingNeighbourhood")
                        .HasColumnType("text");

                    b.Property<string>("BillingNumber")
                        .HasColumnType("text");

                    b.Property<string>("BillingPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("BillingStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("BillingStreet")
                        .HasColumnType("text");

                    b.Property<string>("BillingZIPcode")
                        .HasColumnType("text");

                    b.Property<string>("CnpjMarketPlace")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyNameMarketPlace")
                        .HasColumnType("text");

                    b.Property<string>("CpfUserHasMadeCredit")
                        .HasColumnType("text");

                    b.Property<string>("CustomerAcronym")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCNPJ")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCPF")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerStateRegistration")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IndividualInvoice")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MailingCity")
                        .HasColumnType("text");

                    b.Property<string>("MailingComplement")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("MailingNeighbourhood")
                        .HasColumnType("text");

                    b.Property<string>("MailingNumber")
                        .HasColumnType("text");

                    b.Property<string>("MailingPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("MailingStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("MailingStreet")
                        .HasColumnType("text");

                    b.Property<string>("MailingZIPcode")
                        .HasColumnType("text");

                    b.Property<string>("OpportunityId")
                        .HasColumnType("text");

                    b.Property<string>("ProposalNumber")
                        .HasColumnType("text");

                    b.Property<string>("QuoteId")
                        .HasColumnType("text");

                    b.Property<string>("Segment")
                        .HasColumnType("text");

                    b.Property<string>("UserAccountStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.ToTable("Customer", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", b =>
                {
                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<string>("AffiliateCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("BillFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BillTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CityHallServiceDescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CityServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CustomerTransactionCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CycleCode")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InvoiceCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text");

                    b.Property<string>("Marketplace")
                        .HasColumnType("text");

                    b.Property<string>("MarketplaceCity")
                        .HasColumnType("text");

                    b.Property<string>("MarketplaceState")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalTaxpayerRegistration")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("Premeditateddefaulter")
                        .HasColumnType("text");

                    b.Property<string>("RefundAmount")
                        .HasColumnType("text");

                    b.Property<string>("RefundType")
                        .HasColumnType("text");

                    b.Property<string>("ResellerContactName")
                        .HasColumnType("text");

                    b.Property<string>("ResellerEmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("ResellerName")
                        .HasColumnType("text");

                    b.Property<string>("ResellerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecialProcedureNumber")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("StoreAcronym")
                        .HasColumnType("text");

                    b.Property<string>("StoreCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalInvoicePrice")
                        .HasColumnType("numeric");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("IdFile");

                    b.ToTable("Invoice", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.ServiceInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcquirerEntity")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<string>("BillingCycle")
                        .HasColumnType("text");

                    b.Property<string>("CNPJServiceProviderCompany")
                        .HasColumnType("text");

                    b.Property<string>("ChargeType")
                        .HasColumnType("text");

                    b.Property<string>("CommentsCredited")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CycleReference")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FinancialStatus")
                        .HasColumnType("text");

                    b.Property<double?>("GrandTotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("GrandTotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("GrandTotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("GrossRetailPrice")
                        .HasColumnType("numeric");

                    b.Property<double?>("GrossWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextRenewalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfferCode")
                        .HasColumnType("text");

                    b.Property<string>("OfferName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderCreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("ProRateScale")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedRetailPriceUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedRetailUnitDiscountedPriceAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedVendorUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedWholesaleUnitDiscountedPriceAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("ProRatedWholesaleUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("text");

                    b.Property<string>("PromotionDuration")
                        .HasColumnType("text");

                    b.Property<string>("ProrateOnCancellation")
                        .HasColumnType("text");

                    b.Property<string>("ProrateType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Qty")
                        .HasColumnType("double precision");

                    b.Property<string>("Receivable")
                        .HasColumnType("text");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text");

                    b.Property<double?>("RetailPriceDiscount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RetailUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("SalesReferenceCode")
                        .HasColumnType("text");

                    b.Property<Guid>("Sequence")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceCancellationDate")
                        .HasColumnType("text");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceProviderCompanyName")
                        .HasColumnType("text");

                    b.Property<string>("ServiceType")
                        .HasColumnType("text");

                    b.Property<string>("StoreAcronymServiceProvider")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("text");

                    b.Property<double?>("TaxOnTotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TaxOnTotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TaxOnTotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TaxRateCOFINS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TaxRateISS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TaxRatePIS")
                        .HasColumnType("numeric");

                    b.Property<string?>("TermDuration")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TermEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TermStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("TotalRetailPrice")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TotalRetailPriceDiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<double?>("TotalRetailPriceWithTaxesWithoutDiscount")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TotalTaxCOFINS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalTaxISS")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalTaxPIS")
                        .HasColumnType("numeric");

                    b.Property<double?>("TotalVendorPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalWholesalePrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalWholesalePriceDiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("text");

                    b.Property<string>("UsageAttributes")
                        .HasColumnType("text");

                    b.Property<string>("VendorCurrency")
                        .HasColumnType("text");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.Property<double?>("VendorUnitPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("WholesalePriceDiscount")
                        .HasColumnType("double precision");

                    b.Property<double?>("WholesaleUnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("ServiceInvoice", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.CreditGrantedFinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountingAccountCred")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("AccountingAccountDeb")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CreditGrantedAJU")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StoreAcronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CreditGrantedFinancialAccount", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CycleDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InclusionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("File", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.FinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoletoRetificadoCred")
                        .HasColumnType("text");

                    b.Property<string>("BoletoRetificadoDeb")
                        .HasColumnType("text");

                    b.Property<string>("CompensacaoAJU")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilAjusteCompetenciaCred")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilAjusteCompetenciaDeb")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilContestacaoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilContestacaoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilDebitoConcedidoCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilDebitoConcedidoDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorNUTILCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorNUTILDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorUTILCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorUTILDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilEstimativaCicloCred")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilEstimativaCicloDeb")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilFATCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilFATDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilIMPCRED")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilIMPDEB")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilMultaContCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContNpagaCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContNpagaDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContPagaCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContPagaDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaEstimativaCicloCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaEstimativaCicloDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoNaoPagoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoNaoPagoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoPagoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoPagoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilRecReceitaCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilRecReceitaDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaFaturaDebitoConcedido")
                        .HasColumnType("text");

                    b.Property<string>("ContaFaturaEstornoContestacao")
                        .HasColumnType("text");

                    b.Property<string>("ContaFuturaAJUCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaFuturaAJUDeb")
                        .HasColumnType("text");

                    b.Property<string>("DescontoFAT")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("EstBoletoRetificadoCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("EstBoletoRetificadoDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("FaturamentoAJU")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("FaturamentoFAT")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("MultaQuebraContFAT")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceCodeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StoreType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ServiceCode");

                    b.ToTable("FinancialAccount", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.FinancialAccountDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoletoRetificadoCred")
                        .HasColumnType("text");

                    b.Property<string>("BoletoRetificadoDeb")
                        .HasColumnType("text");

                    b.Property<string>("CompensacaoAJU")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilAjusteCompetenciaCred")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilAjusteCompetenciaDeb")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilContestacaoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilContestacaoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilDebitoConcedidoCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilDebitoConcedidoDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorNUTILCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorNUTILDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorUTILCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilESTCredFuturoValorUTILDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilEstimativaCicloCred")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilEstimativaCicloDeb")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilFATCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilFATDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilIMPCRED")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilIMPDEB")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilMultaContCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContNpagaCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContNpagaDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContPagaCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaContPagaDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaEstimativaCicloCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilMultaEstimativaCicloDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoNaoPagoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoNaoPagoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoPagoCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilProdutoNaoEmitidoPagoDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilRecReceitaCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaContabilRecReceitaDeb")
                        .HasColumnType("text");

                    b.Property<string>("ContaFaturaDebitoConcedido")
                        .HasColumnType("text");

                    b.Property<string>("ContaFaturaEstornoContestacao")
                        .HasColumnType("text");

                    b.Property<string>("ContaFuturaAJUCred")
                        .HasColumnType("text");

                    b.Property<string>("ContaFuturaAJUDeb")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateIncluded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescontoFAT")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("EstBoletoRetificadoCred")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("EstBoletoRetificadoDeb")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("FaturamentoAJU")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("FaturamentoFAT")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid>("IdFinancialAccount")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MultaQuebraContFAT")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StoreType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("FinancialAccountDate", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.InterestAndFineFinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Store")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("TBRA");

                    b.HasKey("Id");

                    b.ToTable("InterestAndFineFinancialAccount", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterfaceProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusType")
                        .HasColumnType("integer");

                    b.Property<int>("UploadType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InterfaceProgress", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("TypeLog")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Log", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.LogDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Line")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("LogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("LogDetail", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.ManagementFinancialAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("StoreType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("ManagementFinancialAccount", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Pay.Critical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InclusionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdFile");

                    b.ToTable("Critical", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentFeedDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateProcessing")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DateTimePayment")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeSIA")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumberJsdn")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("PaymentFeed", "JsdnBill");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PaymentFeedDoc");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ReturnNF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChaveNF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataEmissaoNF")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NFCancelada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroNF")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SerieNF")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StoreAcronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotalDescontoNF")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorTotalNF")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceID");

                    b.ToTable("ReturnNF", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.StatusActivationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ActivationStatus")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfferCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderNumber")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusActivationService", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Upload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UploadDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UploadType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Upload", "JsdnBill");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentBoleto", b =>
                {
                    b.HasBaseType("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentFeedDoc");

                    b.Property<string>("CicloFaturamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CodigoBanco")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoConvenio")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Item")
                        .HasColumnType("integer");

                    b.Property<int?>("NSA")
                        .HasColumnType("integer");

                    b.Property<string>("NomeBanco")
                        .HasColumnType("text");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorRecebido")
                        .HasColumnType("numeric");

                    b.HasIndex("InvoiceNumberJsdn");

                    b.HasDiscriminator().HasValue("PaymentBoleto");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentCreditCard", b =>
                {
                    b.HasBaseType("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentFeedDoc");

                    b.Property<string>("Acquirer")
                        .HasColumnType("text");

                    b.Property<string>("AcquirerEntity")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("AcquirerTransactionID")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<decimal?>("AlternativeAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("AlternativeCurrency")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationID")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int?>("BankIdentificationNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("BatchID")
                        .HasColumnType("integer");

                    b.Property<int?>("CardBrand")
                        .HasColumnType("integer");

                    b.Property<int?>("CardCategory")
                        .HasColumnType("integer");

                    b.Property<string>("CardExpirationDate")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("CardIssuer")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<int?>("CardIssuerCountry")
                        .HasColumnType("integer");

                    b.Property<string>("CardLabel")
                        .HasColumnType("text");

                    b.Property<string>("CardPan")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)");

                    b.Property<string>("CardType")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("CreditCard")
                        .HasColumnType("text");

                    b.Property<string>("CreditCardNSU")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("DataPrint")
                        .HasMaxLength(999)
                        .HasColumnType("character varying(999)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("ExtendedSIAOperationNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("GracePeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("InstallmentsNumber")
                        .HasColumnType("integer");

                    b.Property<decimal?>("InterestAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("MerchantCurrency")
                        .HasColumnType("integer");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("MerchantSession")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("OriginIPAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("text");

                    b.Property<decimal?>("PaymentValue")
                        .HasColumnType("numeric");

                    b.Property<string>("PlanType")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("ProcessCode")
                        .HasColumnType("text");

                    b.Property<int>("ResultCode")
                        .HasColumnType("integer");

                    b.Property<int?>("SIAOperationNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("TerminalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("TypeOperation")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("UrlAuthPath")
                        .HasColumnType("text");

                    b.Property<string>("UrlPuce")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("VersionId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasIndex("InvoiceNumberJsdn");

                    b.HasDiscriminator().HasValue("PaymentCreditCard");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Customer", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", "Invoice")
                        .WithOne("Customer")
                        .HasForeignKey("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Customer", "InvoiceNumber");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.ServiceInvoice", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", "Invoice")
                        .WithMany("Services")
                        .HasForeignKey("InvoiceNumber");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.InterestAndFineFinancialAccount", b =>
                {
                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.Account", "Fine", b1 =>
                        {
                            b1.Property<Guid>("InterestAndFineFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BilledCounterchargeChargeback")
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FineBilledCounterchargeChargeback");

                            b1.Property<string>("FinancialAccount")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FineFinancialAccount");

                            b1.Property<string>("GrantedDebit")
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FineGrantedDebit");

                            b1.HasKey("InterestAndFineFinancialAccountId");

                            b1.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("InterestAndFineFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackFutureCreditUnusedValue", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackFutureCreditUnusedValueCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackFutureCreditUnusedValueDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackFutureCreditUsedValue", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackFutureCreditUsedValueCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackFutureCreditUsedValueDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackRectifiedBoleto", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackRectifiedBoletoCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineChargebackRectifiedBoletoDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "CycleEstimate", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineCycleEstimateCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineCycleEstimateDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "GrantedDebitAccounting", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineGrantedDebitAccountingCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineGrantedDebitAccountingDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "InterestOrFine", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "PaidInvoice", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FinePaidInvoiceCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FinePaidInvoiceDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "UnpaidInvoice", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineUnpaidInvoiceCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FineUnpaidInvoiceDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.Navigation("ChargebackFutureCreditUnusedValue");

                            b1.Navigation("ChargebackFutureCreditUsedValue");

                            b1.Navigation("ChargebackRectifiedBoleto");

                            b1.Navigation("CycleEstimate");

                            b1.Navigation("GrantedDebitAccounting");

                            b1.Navigation("InterestOrFine");

                            b1.Navigation("PaidInvoice");

                            b1.Navigation("UnpaidInvoice");
                        });

                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.Account", "Interest", b1 =>
                        {
                            b1.Property<Guid>("InterestAndFineFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BilledCounterchargeChargeback")
                                .HasColumnType("varchar(15)")
                                .HasColumnName("InterestBilledCounterchargeChargeback");

                            b1.Property<string>("FinancialAccount")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("InterestFinancialAccount");

                            b1.Property<string>("GrantedDebit")
                                .HasColumnType("varchar(15)")
                                .HasColumnName("InterestGrantedDebit");

                            b1.HasKey("InterestAndFineFinancialAccountId");

                            b1.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("InterestAndFineFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackFutureCreditUnusedValue", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackFutureCreditUnusedValueCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackFutureCreditUnusedValueDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackFutureCreditUsedValue", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackFutureCreditUsedValueCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackFutureCreditUsedValueDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "ChargebackRectifiedBoleto", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackRectifiedBoletoCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestChargebackRectifiedBoletoDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "CycleEstimate", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestCycleEstimateCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestCycleEstimateDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "GrantedDebitAccounting", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestGrantedDebitAccountingCredit");

                                    b2.Property<string>("Debit")
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestGrantedDebitAccountingDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "InterestOrFine", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "PaidInvoice", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestPaidInvoiceCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestPaidInvoiceDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.InterestAndFineFinancialAccount.AccountingAccount", "UnpaidInvoice", b2 =>
                                {
                                    b2.Property<Guid>("AccountInterestAndFineFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestUnpaidInvoiceCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("InterestUnpaidInvoiceDebit");

                                    b2.HasKey("AccountInterestAndFineFinancialAccountId");

                                    b2.ToTable("InterestAndFineFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("AccountInterestAndFineFinancialAccountId");
                                });

                            b1.Navigation("ChargebackFutureCreditUnusedValue");

                            b1.Navigation("ChargebackFutureCreditUsedValue");

                            b1.Navigation("ChargebackRectifiedBoleto");

                            b1.Navigation("CycleEstimate");

                            b1.Navigation("GrantedDebitAccounting");

                            b1.Navigation("InterestOrFine");

                            b1.Navigation("PaidInvoice");

                            b1.Navigation("UnpaidInvoice");
                        });

                    b.Navigation("Fine");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Log", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.File", null)
                        .WithMany("Logs")
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.LogDetail", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Log", null)
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.ManagementFinancialAccount", b =>
                {
                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.ARR", "ARR", b1 =>
                        {
                            b1.Property<Guid>("ManagementFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.HasKey("ManagementFinancialAccountId");

                            b1.ToTable("ManagementFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.Boleto", "Boleto", b2 =>
                                {
                                    b2.Property<Guid>("ARRManagementFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FinancialAccount")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FinancialAccountBoleto");

                                    b2.HasKey("ARRManagementFinancialAccountId");

                                    b2.ToTable("ManagementFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("ARRManagementFinancialAccountId");

                                    b2.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.AccountingAccount", "AccountingAccount", b3 =>
                                        {
                                            b3.Property<Guid>("BoletoARRManagementFinancialAccountId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Credit")
                                                .IsRequired()
                                                .HasColumnType("varchar(15)")
                                                .HasColumnName("AccountingAccountBoletoCredit");

                                            b3.Property<string>("Debit")
                                                .IsRequired()
                                                .HasColumnType("varchar(15)")
                                                .HasColumnName("AccountingAccountBoletoDebit");

                                            b3.HasKey("BoletoARRManagementFinancialAccountId");

                                            b3.ToTable("ManagementFinancialAccount", "JsdnBill");

                                            b3.WithOwner()
                                                .HasForeignKey("BoletoARRManagementFinancialAccountId");
                                        });

                                    b2.Navigation("AccountingAccount");
                                });

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.CreditCard", "CreditCard", b2 =>
                                {
                                    b2.Property<Guid>("ARRManagementFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("FinancialAccount")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("FinancialAccountCreditCard");

                                    b2.HasKey("ARRManagementFinancialAccountId");

                                    b2.ToTable("ManagementFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("ARRManagementFinancialAccountId");

                                    b2.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.AccountingAccount", "AccountingAccount", b3 =>
                                        {
                                            b3.Property<Guid>("CreditCardARRManagementFinancialAccountId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Credit")
                                                .IsRequired()
                                                .HasColumnType("varchar(15)")
                                                .HasColumnName("AccountingAccountCreditCardCredit");

                                            b3.Property<string>("Debit")
                                                .IsRequired()
                                                .HasColumnType("varchar(15)")
                                                .HasColumnName("AccountingAccountCreditCardDebit");

                                            b3.HasKey("CreditCardARRManagementFinancialAccountId");

                                            b3.ToTable("ManagementFinancialAccount", "JsdnBill");

                                            b3.WithOwner()
                                                .HasForeignKey("CreditCardARRManagementFinancialAccountId");
                                        });

                                    b2.Navigation("AccountingAccount");
                                });

                            b1.Navigation("Boleto");

                            b1.Navigation("CreditCard");
                        });

                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.Critic", "Critic", b1 =>
                        {
                            b1.Property<Guid>("ManagementFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FinancialAccount")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FinancialAccountCritic");

                            b1.HasKey("ManagementFinancialAccountId");

                            b1.ToTable("ManagementFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.AccountingAccount", "AccountingAccount", b2 =>
                                {
                                    b2.Property<Guid>("CriticManagementFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountCriticCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountCriticDebit");

                                    b2.HasKey("CriticManagementFinancialAccountId");

                                    b2.ToTable("ManagementFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("CriticManagementFinancialAccountId");
                                });

                            b1.Navigation("AccountingAccount");
                        });

                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.Transfer", "Transfer", b1 =>
                        {
                            b1.Property<Guid>("ManagementFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FinancialAccount")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FinancialAccountTransferred");

                            b1.HasKey("ManagementFinancialAccountId");

                            b1.ToTable("ManagementFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.AccountingAccount", "AccountingAccount", b2 =>
                                {
                                    b2.Property<Guid>("TransferManagementFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountTransferCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountTransferDebit");

                                    b2.HasKey("TransferManagementFinancialAccountId");

                                    b2.ToTable("ManagementFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("TransferManagementFinancialAccountId");
                                });

                            b1.Navigation("AccountingAccount");
                        });

                    b.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.Unassigned", "Unassigned", b1 =>
                        {
                            b1.Property<Guid>("ManagementFinancialAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FinancialAccount")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("FinancialAccountUnassigned");

                            b1.HasKey("ManagementFinancialAccountId");

                            b1.ToTable("ManagementFinancialAccount", "JsdnBill");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFinancialAccountId");

                            b1.OwnsOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.ManagementFinancialAccount.AccountingAccount", "AccountingAccount", b2 =>
                                {
                                    b2.Property<Guid>("UnassignedManagementFinancialAccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Credit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountUnassignedCredit");

                                    b2.Property<string>("Debit")
                                        .IsRequired()
                                        .HasColumnType("varchar(15)")
                                        .HasColumnName("AccountingAccountUnassignedDebit");

                                    b2.HasKey("UnassignedManagementFinancialAccountId");

                                    b2.ToTable("ManagementFinancialAccount", "JsdnBill");

                                    b2.WithOwner()
                                        .HasForeignKey("UnassignedManagementFinancialAccountId");
                                });

                            b1.Navigation("AccountingAccount");
                        });

                    b.Navigation("ARR")
                        .IsRequired();

                    b.Navigation("Critic")
                        .IsRequired();

                    b.Navigation("Transfer")
                        .IsRequired();

                    b.Navigation("Unassigned")
                        .IsRequired();
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Pay.Critical", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.File", "File")
                        .WithMany("Criticals")
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentBoleto", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", "Invoice")
                        .WithMany("PaymentFeedsBoleto")
                        .HasForeignKey("InvoiceNumberJsdn");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.PaymentCreditCard", b =>
                {
                    b.HasOne("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", "Invoice")
                        .WithMany("PaymentFeedsCredit")
                        .HasForeignKey("InvoiceNumberJsdn");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.BillFeedSplit.Invoice", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("PaymentFeedsBoleto");

                    b.Navigation("PaymentFeedsCredit");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.File", b =>
                {
                    b.Navigation("Criticals");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Gcsb.Connect.SAP.Infrastructure.PostgresDataAccess.Entities.Log", b =>
                {
                    b.Navigation("LogDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
