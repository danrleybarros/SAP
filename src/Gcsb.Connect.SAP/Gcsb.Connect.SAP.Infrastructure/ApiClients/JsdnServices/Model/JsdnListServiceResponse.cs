// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Gcsb.Connect.SAP.Infrastructure.ApiClients.JsdnServices.Model;
//
//    var jsdnListServicesResponse = JsdnListServicesResponse.FromJson(jsonString);

namespace Gcsb.Connect.SAP.Infrastructure.ApiClients.JsdnServices.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class JsdnListServicesResponse
    {
        [JsonProperty("Services")]
        public Services Services { get; set; }


        public List<Domain.JSDN.Service> ConvertToDomain()
        {
            List<Domain.JSDN.Service> services = new List<Domain.JSDN.Service>();
            if (Services?.ServiceList != null)
            {
                foreach (var service in Services.ServiceList)
                {
                    services.Add(new Domain.JSDN.Service(service.Code, service.Name));
                }
            }
            return services;
        }
    }

    public partial class Services
    {
        [JsonProperty("serviceList")]
        public List<ServiceList> ServiceList { get; set; }
    }

    public partial class ServiceList
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("moreInfo")]
        public string MoreInfo { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("serviceCategories")]
        public ServiceCategories ServiceCategories { get; set; }

        [JsonProperty("mediaSet")]
        public MediaSet MediaSet { get; set; }

        [JsonProperty("urn")]
        public Uri Urn { get; set; }

        [JsonProperty("serviceAssignedToUser")]
        public bool ServiceAssignedToUser { get; set; }

        [JsonProperty("requirements", NullValueHandling = NullValueHandling.Ignore)]
        public string Requirements { get; set; }

        [JsonProperty("faqs", NullValueHandling = NullValueHandling.Ignore)]
        public string Faqs { get; set; }
    }

    public partial class MediaSet
    {
        [JsonProperty("serviceMedia")]
        public List<ServiceMedia> ServiceMedia { get; set; }
    }

    public partial class ServiceMedia
    {
        [JsonProperty("logoList")]
        public List<LogoList> LogoList { get; set; }
    }

    public partial class LogoList
    {
        [JsonProperty("urn")]
        public Uri Urn { get; set; }

        [JsonProperty("dimensions")]
        public string Dimensions { get; set; }
    }

    public partial class ServiceCategories
    {
        [JsonProperty("categoryList")]
        public List<CategoryList> CategoryList { get; set; }
    }

    public partial class CategoryList
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("serviceSubCategories")]
        public List<ServiceSubCategory> ServiceSubCategories { get; set; }
    }

    public partial class ServiceSubCategory
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }
    
    public enum TypeEnum { BundledService, IndividualService };

    public partial class JsdnListServicesResponse
    {
        public static JsdnListServicesResponse FromJson(string json) => JsonConvert.DeserializeObject<JsdnListServicesResponse>(json, Gcsb.Connect.SAP.Infrastructure.ApiClients.JsdnServices.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JsdnListServicesResponse self) => JsonConvert.SerializeObject(self, Gcsb.Connect.SAP.Infrastructure.ApiClients.JsdnServices.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Bundled Service":
                    return TypeEnum.BundledService;
                case "Individual Service":
                    return TypeEnum.IndividualService;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.BundledService:
                    serializer.Serialize(writer, "Bundled Service");
                    return;
                case TypeEnum.IndividualService:
                    serializer.Serialize(writer, "Individual Service");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}

