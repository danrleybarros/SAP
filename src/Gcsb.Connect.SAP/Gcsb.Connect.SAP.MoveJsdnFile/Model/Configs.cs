// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Gcsb.Connect.SAP.MoveJsdnFile.Model;
//
//    var configs = Configs.FromJson(jsonString);

namespace Gcsb.Connect.SAP.MoveJsdnFile.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Configs
    {
        [JsonProperty("interfaces")]
        public List<Interface> Interfaces { get; set; }
    }

    public partial class Interface
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("dest")]
        public string Dest { get; set; }

        [JsonProperty("order")]
        public long Order { get; set; }

        [JsonProperty("mode")]
        public string Mode { get; set; }

        [JsonProperty("search")]
        public string Search { get; set; }

        [JsonProperty("process")]
        public string Process { get; set; }
    }

    public partial class Configs
    {
        public static Configs FromJson(string json) => JsonConvert.DeserializeObject<Configs>(json, Gcsb.Connect.SAP.MoveJsdnFile.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Configs self) => JsonConvert.SerializeObject(self, Gcsb.Connect.SAP.MoveJsdnFile.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
